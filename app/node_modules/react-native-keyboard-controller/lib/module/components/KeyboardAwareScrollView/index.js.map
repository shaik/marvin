{"version":3,"names":["React","forwardRef","useCallback","useEffect","useMemo","Reanimated","clamp","interpolate","runOnUI","scrollTo","useAnimatedReaction","useAnimatedRef","useAnimatedStyle","useScrollViewOffset","useSharedValue","useFocusedInputHandler","useReanimatedFocusedInput","useWindowDimensions","findNodeHandle","useSmoothKeyboardHandler","debounce","scrollDistanceWithRespectToSnapPoints","KeyboardAwareScrollView","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","extraKeyboardSpace","ScrollViewComponent","ScrollView","snapToOffsets","rest","ref","scrollViewAnimatedRef","scrollViewTarget","scrollPosition","position","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","layout","lastSelection","height","onRef","assignedRef","current","onScrollViewLayout","e","value","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","relativeScrollTo","interpolatedScrollTo","targetScrollY","Math","max","positionOnScreen","topOfScreen","syncKeyboardFrame","keyboardFrame","updateLayoutFromSelection","_lastSelection$value","_input$value","customHeight","selection","end","y","scrollFromCurrentPosition","prevScrollPosition","prevLayout","onChangeText","onChangeTextHandler","onSelectionChange","_lastSelection$value2","_lastSelection$value3","lastTarget","target","latestSelection","start","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","onMove","onEnd","previous","view","paddingBottom","createElement","_extends","scrollEventThrottle","View","style"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo } from \"react\";\nimport Reanimated, {\n  clamp,\n  interpolate,\n  runOnUI,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollViewOffset,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n  useWindowDimensions,\n} from \"../../hooks\";\nimport { findNodeHandle } from \"../../utils/findNodeHandle\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce, scrollDistanceWithRespectToSnapPoints } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type {\n  FocusedInputLayoutChangedEvent,\n  FocusedInputSelectionChangedEvent,\n  NativeEvent,\n} from \"react-native-keyboard-controller\";\n\nexport type KeyboardAwareScrollViewProps = {\n  /** The distance between the keyboard and the caret inside a focused `TextInput` when the keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true`. */\n  enabled?: boolean;\n  /** Adjusting the bottom spacing of KeyboardAwareScrollView. Default is `0`. */\n  extraKeyboardSpace?: number;\n  /** Custom component for `ScrollView`. Default is `ScrollView`. */\n  ScrollViewComponent?: React.ComponentType<ScrollViewProps>;\n} & ScrollViewProps;\n\n// Everything begins from `onStart` handler. This handler is called every time,\n// when keyboard changes its size or when focused `TextInput` was changed. In\n// this handler we are calculating/memoizing values which later will be used\n// during layout movement. For that we calculate:\n// - layout of focused field (`layout`) - to understand whether there will be overlap\n// - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n// - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n// - current scroll position (`scrollPosition`) - used to scroll from this point\n//\n// Once we've calculated all necessary variables - we can actually start to use them.\n// It happens in `onMove` handler - this function simply calls `maybeScroll` with\n// current keyboard frame height. This functions makes the smooth transition.\n//\n// When the transition has finished we go to `onEnd` handler. In this handler\n// we verify, that the current field is not overlapped within a keyboard frame.\n// For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n// however there could be some cases, when `onMove` is not called:\n// - on iOS when TextInput was changed - keyboard transition is instant\n// - on Android when TextInput was changed and keyboard size wasn't changed\n// So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n//\n// ====================================================================================================================+\n// -----------------------------------------------------Flow chart-----------------------------------------------------+\n// ====================================================================================================================+\n//\n// +============================+       +============================+        +==================================+\n// +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n// +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n// +============================+       +============================+        +==================================+\n//\n// +============================+       +============================+        +=====================================+\n// + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n// +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n// +============================+       +============================+        +=====================================+\n//\n\n/**\n * A ScrollView component that automatically handles keyboard appearance and disappearance\n * by adjusting its content position to ensure the focused input remains visible.\n *\n * The component uses a sophisticated animation system to smoothly handle keyboard transitions\n * and maintain proper scroll position during keyboard interactions.\n *\n * @returns A ScrollView component that handles keyboard interactions.\n * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/components/keyboard-aware-scroll-view|Documentation} page for more details.\n * @example\n * ```tsx\n * <KeyboardAwareScrollView bottomOffset={20}>\n *   <TextInput placeholder=\"Enter text\" />\n *   <TextInput placeholder=\"Another input\" />\n * </KeyboardAwareScrollView>\n * ```\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      extraKeyboardSpace = 0,\n      ScrollViewComponent = Reanimated.ScrollView,\n      snapToOffsets,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useScrollViewOffset(scrollViewAnimatedRef);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n    const lastSelection =\n      useSharedValue<FocusedInputSelectionChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving.\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const relativeScrollTo =\n            keyboardHeight.value - (height - point) + bottomOffset;\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [\n              0,\n              scrollDistanceWithRespectToSnapPoints(\n                relativeScrollTo + scrollPosition.value,\n                snapToOffsets,\n              ) - scrollPosition.value,\n            ],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (point < 0) {\n          const positionOnScreen = visibleRect - bottomOffset;\n          const topOfScreen = scrollPosition.value + point;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled, height, snapToOffsets],\n    );\n    const syncKeyboardFrame = useCallback(\n      (e: NativeEvent) => {\n        \"worklet\";\n\n        const keyboardFrame = interpolate(\n          e.height,\n          [0, keyboardHeight.value],\n          [0, keyboardHeight.value + extraKeyboardSpace],\n        );\n\n        currentKeyboardFrameHeight.value = keyboardFrame;\n      },\n      [extraKeyboardSpace],\n    );\n\n    const updateLayoutFromSelection = useCallback(() => {\n      \"worklet\";\n\n      const customHeight = lastSelection.value?.selection.end.y;\n\n      if (!input.value?.layout || !customHeight) {\n        return false;\n      }\n\n      layout.value = {\n        ...input.value,\n        layout: {\n          ...input.value.layout,\n          // when we have multiline input with limited amount of lines, then custom height can be very big\n          // so we clamp it to max input height\n          height: clamp(customHeight, 0, input.value.layout.height),\n        },\n      };\n\n      return true;\n    }, [input, lastSelection, layout]);\n    const scrollFromCurrentPosition = useCallback(() => {\n      \"worklet\";\n\n      const prevScrollPosition = scrollPosition.value;\n      const prevLayout = layout.value;\n\n      if (!updateLayoutFromSelection()) {\n        return;\n      }\n\n      // eslint-disable-next-line react-compiler/react-compiler\n      scrollPosition.value = position.value;\n      maybeScroll(keyboardHeight.value, true);\n      scrollPosition.value = prevScrollPosition;\n      layout.value = prevLayout;\n    }, [maybeScroll]);\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n      scrollFromCurrentPosition();\n    }, [scrollFromCurrentPosition]);\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n    const onSelectionChange = useCallback(\n      (e: FocusedInputSelectionChangedEvent) => {\n        \"worklet\";\n\n        const lastTarget = lastSelection.value?.target;\n        const latestSelection = lastSelection.value?.selection;\n\n        lastSelection.value = e;\n\n        if (e.target !== lastTarget) {\n          // ignore this event, because \"focus changed\" event handled in `useSmoothKeyboardHandler`\n          return;\n        }\n        // caret in the end + end coordinates has been changed -> we moved to a new line\n        // so input may grow\n        if (\n          e.selection.end.position === e.selection.start.position &&\n          latestSelection?.end.y !== e.selection.end.y\n        ) {\n          return scrollFromCurrentPosition();\n        }\n        // selection has been changed\n        if (e.selection.start.position !== e.selection.end.position) {\n          return scrollFromCurrentPosition();\n        }\n\n        onChangeTextHandler();\n      },\n      [scrollFromCurrentPosition, onChangeTextHandler],\n    );\n\n    useFocusedInputHandler(\n      {\n        onSelectionChange: onSelectionChange,\n      },\n      [onSelectionChange],\n    );\n\n    useSmoothKeyboardHandler(\n      {\n        onStart: (e) => {\n          \"worklet\";\n\n          const keyboardWillChangeSize =\n            keyboardHeight.value !== e.height && e.height > 0;\n\n          keyboardWillAppear.value = e.height > 0 && keyboardHeight.value === 0;\n\n          const keyboardWillHide = e.height === 0;\n          const focusWasChanged =\n            (tag.value !== e.target && e.target !== -1) ||\n            keyboardWillChangeSize;\n\n          if (keyboardWillChangeSize) {\n            initialKeyboardSize.value = keyboardHeight.value;\n          }\n\n          if (keyboardWillHide) {\n            // on back transition need to interpolate as [0, keyboardHeight]\n            initialKeyboardSize.value = 0;\n            scrollPosition.value = scrollBeforeKeyboardMovement.value;\n          }\n\n          if (\n            keyboardWillAppear.value ||\n            keyboardWillChangeSize ||\n            focusWasChanged\n          ) {\n            // persist scroll value\n            scrollPosition.value = position.value;\n            // just persist height - later will be used in interpolation\n            keyboardHeight.value = e.height;\n          }\n\n          // focus was changed\n          if (focusWasChanged) {\n            tag.value = e.target;\n            // save position of focused text input when keyboard starts to move\n            updateLayoutFromSelection();\n            // save current scroll position - when keyboard will hide we'll reuse\n            // this value to achieve smooth hide effect\n            scrollBeforeKeyboardMovement.value = position.value;\n          }\n\n          if (focusWasChanged && !keyboardWillAppear.value) {\n            // update position on scroll value, so `onEnd` handler\n            // will pick up correct values\n            position.value += maybeScroll(e.height, true);\n          }\n        },\n        onMove: (e) => {\n          \"worklet\";\n\n          syncKeyboardFrame(e);\n\n          // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n          if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n            maybeScroll(e.height);\n          }\n        },\n        onEnd: (e) => {\n          \"worklet\";\n\n          keyboardHeight.value = e.height;\n          scrollPosition.value = position.value;\n\n          syncKeyboardFrame(e);\n        },\n      },\n      [maybeScroll, disableScrollOnKeyboardHide, syncKeyboardFrame],\n    );\n\n    useEffect(() => {\n      runOnUI(maybeScroll)(keyboardHeight.value, true);\n    }, [bottomOffset]);\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          // input has changed layout - let's check if we need to scroll\n          // may happen when you paste text, then onSelectionChange will be\n          // fired earlier than text actually changes its layout\n          scrollFromCurrentPosition();\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () =>\n        enabled\n          ? {\n              // animations become choppy when scrolling to the end of the `ScrollView` (when the last input is focused)\n              // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n              // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n              // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n              // re-calculation on every animation frame and it helps to achieve smooth animation.\n              // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n              paddingBottom: currentKeyboardFrameHeight.value + 1,\n            }\n          : {},\n      [enabled],\n    );\n\n    return (\n      <ScrollViewComponent\n        ref={onRef}\n        {...rest}\n        scrollEventThrottle={16}\n        onLayout={onScrollViewLayout}\n      >\n        {children}\n        {enabled && <Reanimated.View style={view} />}\n      </ScrollViewComponent>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}