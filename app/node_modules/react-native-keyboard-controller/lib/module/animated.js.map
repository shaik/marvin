{"version":3,"names":["React","useEffect","useMemo","useRef","useState","Animated","Platform","StyleSheet","controlEdgeToEdgeValues","isEdgeToEdge","Reanimated","useSharedValue","KeyboardControllerView","KeyboardContext","focusedInputEventsMap","keyboardEventsMap","useAnimatedValue","useEventHandlerRegistration","KeyboardController","useAnimatedKeyboardHandler","useFocusedInputLayoutHandler","IS_EDGE_TO_EDGE","KeyboardControllerViewAnimated","createAnimatedComponent","styles","create","container","flex","hidden","display","position","OS","KeyboardProvider","props","children","statusBarTranslucent","navigationBarTranslucent","preserveEdgeToEdge","enabled","initiallyEnabled","preload","viewTagRef","setEnabled","progress","height","progressSV","heightSV","layout","setKeyboardHandlers","setInputHandlers","context","animated","multiply","reanimated","style","transform","translateX","translateY","onKeyboardMove","event","nativeEvent","useNativeDriver","updateSharedValues","platforms","includes","value","keyboardHandler","onKeyboardMoveStart","onKeyboardMoveInteractive","onKeyboardMoveEnd","inputLayoutHandler","onFocusedInputLayoutChanged","e","target","__DEV__","createElement","Provider","ref","onKeyboardMoveReanimated","undefined","onFocusedInputLayoutChangedReanimated","View"],"sources":["animated.tsx"],"sourcesContent":["/* eslint react/jsx-sort-props: off */\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Animated, Platform, StyleSheet } from \"react-native\";\nimport {\n  controlEdgeToEdgeValues,\n  isEdgeToEdge,\n} from \"react-native-is-edge-to-edge\";\nimport Reanimated, { useSharedValue } from \"react-native-reanimated\";\n\nimport { KeyboardControllerView } from \"./bindings\";\nimport { KeyboardContext } from \"./context\";\nimport { focusedInputEventsMap, keyboardEventsMap } from \"./event-mappings\";\nimport { useAnimatedValue, useEventHandlerRegistration } from \"./internal\";\nimport { KeyboardController } from \"./module\";\nimport {\n  useAnimatedKeyboardHandler,\n  useFocusedInputLayoutHandler,\n} from \"./reanimated\";\n\nimport type { KeyboardAnimationContext } from \"./context\";\nimport type {\n  FocusedInputHandler,\n  FocusedInputLayoutChangedEvent,\n  KeyboardControllerProps,\n  KeyboardHandler,\n  NativeEvent,\n} from \"./types\";\nimport type { ViewStyle } from \"react-native\";\n\nconst IS_EDGE_TO_EDGE = isEdgeToEdge();\n\nconst KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(\n  Animated.createAnimatedComponent(KeyboardControllerView),\n);\n\ntype Styles = {\n  container: ViewStyle;\n  hidden: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    display: \"none\",\n    position: \"absolute\",\n  },\n});\n\ntype KeyboardProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Set the value to `true`, if you use translucent status bar on Android.\n   * If you already control status bar translucency via `react-native-screens`\n   * or `StatusBar` component from `react-native`, you can ignore it.\n   * Defaults to `false`.\n   *\n   * @platform android\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/14\n   */\n  statusBarTranslucent?: boolean;\n  /**\n   * Set the value to `true`, if you use translucent navigation bar on Android.\n   * Defaults to `false`.\n   *\n   * @platform android\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/119\n   */\n  navigationBarTranslucent?: boolean;\n  /**\n   * A boolean property indicating whether to keep edge-to-edge mode always enabled (even when you disable the module).\n   * Defaults to `false`.\n   *\n   * @platform android\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/592\n   */\n  preserveEdgeToEdge?: boolean;\n  /**\n   * A boolean prop indicating whether the module is enabled. It indicate only initial state\n   * (if you try to change this prop after component mount it will not have any effect).\n   * To change the property in runtime use `useKeyboardController` hook and `setEnabled` method.\n   * Defaults to `true`.\n   */\n  enabled?: boolean;\n  /**\n   * A boolean prop indicating whether to preload the keyboard to reduce time-to-interaction (TTI) on first input focus.\n   * Defaults to `true`.\n   *\n   * @platform ios\n   */\n  preload?: boolean;\n};\n\n// capture `Platform.OS` in separate variable to avoid deep workletization of entire RN package\n// see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/393 and https://github.com/kirillzyusko/react-native-keyboard-controller/issues/294 for more details\nconst OS = Platform.OS;\n\n/**\n * A component that wrap your app. Under the hood it works with {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller-view|KeyboardControllerView} to receive events during keyboard movements,\n * maps these events to `Animated`/`Reanimated` values and store them in context.\n *\n * @param props - Provider props, such as `statusBarTranslucent`, `navigationBarTranslucent`, etc.\n * @returns A component that should be mounted in root of your App layout.\n * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-provider|Documentation} page for more details.\n * @example\n * ```tsx\n * <KeyboardProvider>\n *   <NavigationContainer />\n * </KeyboardProvider>\n * ```\n */\nexport const KeyboardProvider = (props: KeyboardProviderProps) => {\n  const {\n    children,\n    statusBarTranslucent,\n    navigationBarTranslucent,\n    preserveEdgeToEdge,\n    enabled: initiallyEnabled = true,\n    preload = true,\n  } = props;\n  // ref\n  const viewTagRef = useRef<React.Component<KeyboardControllerProps>>(null);\n  // state\n  const [enabled, setEnabled] = useState(initiallyEnabled);\n  // animated values\n  const progress = useAnimatedValue(0);\n  const height = useAnimatedValue(0);\n  // shared values\n  const progressSV = useSharedValue(0);\n  const heightSV = useSharedValue(0);\n  const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n  const setKeyboardHandlers = useEventHandlerRegistration<KeyboardHandler>(\n    keyboardEventsMap,\n    viewTagRef,\n  );\n  const setInputHandlers = useEventHandlerRegistration<FocusedInputHandler>(\n    focusedInputEventsMap,\n    viewTagRef,\n  );\n  // memo\n  const context = useMemo<KeyboardAnimationContext>(\n    () => ({\n      enabled,\n      animated: { progress: progress, height: Animated.multiply(height, -1) },\n      reanimated: { progress: progressSV, height: heightSV },\n      layout,\n      setKeyboardHandlers,\n      setInputHandlers,\n      setEnabled,\n    }),\n    [enabled],\n  );\n  const style = useMemo(\n    () => [\n      styles.hidden,\n      { transform: [{ translateX: height }, { translateY: progress }] },\n    ],\n    [],\n  );\n  const onKeyboardMove = useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              progress,\n              height,\n            },\n          },\n        ],\n        // Setting useNativeDriver to true on web triggers a warning due to the absence of a native driver for web. Therefore, it is set to false.\n        { useNativeDriver: Platform.OS !== \"web\" },\n      ),\n    [],\n  );\n  // handlers\n  const updateSharedValues = (event: NativeEvent, platforms: string[]) => {\n    \"worklet\";\n\n    if (platforms.includes(OS)) {\n      // eslint-disable-next-line react-compiler/react-compiler\n      progressSV.value = event.progress;\n      heightSV.value = -event.height;\n    }\n  };\n  const keyboardHandler = useAnimatedKeyboardHandler(\n    {\n      onKeyboardMoveStart: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"ios\"]);\n      },\n      onKeyboardMove: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"android\"]);\n      },\n      onKeyboardMoveInteractive: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"android\", \"ios\"]);\n      },\n      onKeyboardMoveEnd: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"android\"]);\n      },\n    },\n    [],\n  );\n  const inputLayoutHandler = useFocusedInputLayoutHandler(\n    {\n      onFocusedInputLayoutChanged: (e) => {\n        \"worklet\";\n\n        if (e.target !== -1) {\n          layout.value = e;\n        } else {\n          layout.value = null;\n        }\n      },\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (preload) {\n      KeyboardController.preload();\n    }\n  }, [preload]);\n\n  if (__DEV__) {\n    controlEdgeToEdgeValues({\n      statusBarTranslucent,\n      navigationBarTranslucent,\n      preserveEdgeToEdge,\n    });\n  }\n\n  return (\n    <KeyboardContext.Provider value={context}>\n      <KeyboardControllerViewAnimated\n        ref={viewTagRef}\n        enabled={enabled}\n        navigationBarTranslucent={IS_EDGE_TO_EDGE || navigationBarTranslucent}\n        statusBarTranslucent={IS_EDGE_TO_EDGE || statusBarTranslucent}\n        preserveEdgeToEdge={IS_EDGE_TO_EDGE || preserveEdgeToEdge}\n        style={styles.container}\n        // on*Reanimated prop must precede animated handlers to work correctly\n        onKeyboardMoveReanimated={keyboardHandler}\n        onKeyboardMoveStart={OS === \"ios\" ? onKeyboardMove : undefined}\n        onKeyboardMove={OS === \"android\" ? onKeyboardMove : undefined}\n        onKeyboardMoveInteractive={onKeyboardMove}\n        onKeyboardMoveEnd={OS === \"android\" ? onKeyboardMove : undefined}\n        onFocusedInputLayoutChangedReanimated={inputLayoutHandler}\n      >\n        {children}\n      </KeyboardControllerViewAnimated>\n      <Animated.View\n        // we are using this small hack, because if the component (where\n        // animated value has been used) is unmounted, then animation will\n        // stop receiving events (seems like it's react-native optimization).\n        // So we need to keep a reference to the animated value, to keep it's\n        // always mounted (keep a reference to an animated value).\n        //\n        // To test why it's needed, try to open screen which consumes Animated.Value\n        // then close it and open it again (for example 'Animated transition').\n        style={style}\n      />\n    </KeyboardContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]}