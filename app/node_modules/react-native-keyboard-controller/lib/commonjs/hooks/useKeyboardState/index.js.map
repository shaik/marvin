{"version":3,"names":["_react","require","_bindings","_module","EVENTS","getLatestState","KeyboardController","state","isVisible","defaultSelector","useKeyboardState","selector","setState","useState","useEffect","subscriptions","map","event","KeyboardEvents","addListener","willShowSubscription","e","appearance","forEach","subscription","remove"],"sources":["index.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { KeyboardEvents } from \"../../bindings\";\nimport { KeyboardController } from \"../../module\";\n\nimport type { KeyboardState } from \"../../types\";\n\nconst EVENTS = [\"keyboardDidShow\", \"keyboardDidHide\"] as const;\n\nconst getLatestState = () => ({\n  ...KeyboardController.state(),\n  isVisible: KeyboardController.isVisible(),\n});\n\ntype KeyboardStateSelector<T> = (state: KeyboardState) => T;\n\nconst defaultSelector: KeyboardStateSelector<KeyboardState> = (state) => state;\n\n/**\n * React Hook that represents the current keyboard state on iOS and Android.\n * It tracks keyboard visibility, height, appearance, type and other properties.\n * This hook subscribes to keyboard events and updates the state reactively.\n *\n * @template T - A type of the returned object from the `selector`.\n * @param selector - A function that receives the current keyboard state and picks only necessary properties to avoid frequent re-renders.\n * @returns Object {@link KeyboardState|containing} keyboard state information.\n * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/hooks/keyboard/use-keyboard-state|Documentation} page for more details.\n * @example\n * ```tsx\n * function MyComponent() {\n *   const isVisible = useKeyboardState((state) => state.isVisible);\n *   const height = useKeyboardState((state) => state.height);\n *\n *   return (\n *     <View>\n *       <Text>Keyboard is {isVisible ? 'visible' : 'hidden'}</Text>\n *       <Text>Keyboard height: {height}</Text>\n *     </View>\n *   );\n * }\n * ```\n */\nfunction useKeyboardState<T = KeyboardState>(\n  selector: KeyboardStateSelector<T> = defaultSelector as KeyboardStateSelector<T>,\n): T {\n  const [state, setState] = useState<T>(() => selector(getLatestState()));\n\n  useEffect(() => {\n    const subscriptions = EVENTS.map((event) =>\n      KeyboardEvents.addListener(event, () =>\n        // state will be updated by global listener first,\n        // so we simply read it and don't derive data from the event\n        setState(selector(getLatestState())),\n      ),\n    );\n    // update `appearance` prematurely\n    const willShowSubscription = KeyboardEvents.addListener(\n      \"keyboardWillShow\",\n      (e) =>\n        setState(selector({ ...getLatestState(), appearance: e.appearance })),\n    );\n\n    // we might have missed an update between reading a value in render and\n    // `addListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    setState(selector(getLatestState()));\n\n    return () => {\n      subscriptions.forEach((subscription) => subscription.remove());\n      willShowSubscription.remove();\n    };\n  }, []);\n\n  return state;\n}\n\nexport { useKeyboardState };\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AAIA,MAAMG,MAAM,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,CAAU;AAE9D,MAAMC,cAAc,GAAGA,CAAA,MAAO;EAC5B,GAAGC,0BAAkB,CAACC,KAAK,CAAC,CAAC;EAC7BC,SAAS,EAAEF,0BAAkB,CAACE,SAAS,CAAC;AAC1C,CAAC,CAAC;AAIF,MAAMC,eAAqD,GAAIF,KAAK,IAAKA,KAAK;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,gBAAgBA,CACvBC,QAAkC,GAAGF,eAA2C,EAC7E;EACH,MAAM,CAACF,KAAK,EAAEK,QAAQ,CAAC,GAAG,IAAAC,eAAQ,EAAI,MAAMF,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC,CAAC;EAEvE,IAAAS,gBAAS,EAAC,MAAM;IACd,MAAMC,aAAa,GAAGX,MAAM,CAACY,GAAG,CAAEC,KAAK,IACrCC,wBAAc,CAACC,WAAW,CAACF,KAAK,EAAE;IAChC;IACA;IACAL,QAAQ,CAACD,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC,CACrC,CACF,CAAC;IACD;IACA,MAAMe,oBAAoB,GAAGF,wBAAc,CAACC,WAAW,CACrD,kBAAkB,EACjBE,CAAC,IACAT,QAAQ,CAACD,QAAQ,CAAC;MAAE,GAAGN,cAAc,CAAC,CAAC;MAAEiB,UAAU,EAAED,CAAC,CAACC;IAAW,CAAC,CAAC,CACxE,CAAC;;IAED;IACA;IACA;IACAV,QAAQ,CAACD,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC,CAAC;IAEpC,OAAO,MAAM;MACXU,aAAa,CAACQ,OAAO,CAAEC,YAAY,IAAKA,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC;MAC9DL,oBAAoB,CAACK,MAAM,CAAC,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOlB,KAAK;AACd","ignoreList":[]}