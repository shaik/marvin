{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNativeReanimated","_hooks","_findNodeHandle","_useSmoothKeyboardHandler","_utils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_extends","assign","bind","arguments","length","apply","KeyboardAwareScrollView","forwardRef","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","extraKeyboardSpace","ScrollViewComponent","Reanimated","ScrollView","snapToOffsets","rest","ref","scrollViewAnimatedRef","useAnimatedRef","scrollViewTarget","useSharedValue","scrollPosition","position","useScrollViewOffset","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","useReanimatedFocusedInput","layout","lastSelection","height","useWindowDimensions","onRef","useCallback","assignedRef","current","onScrollViewLayout","value","findNodeHandle","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","relativeScrollTo","interpolatedScrollTo","interpolate","scrollDistanceWithRespectToSnapPoints","targetScrollY","Math","max","scrollTo","positionOnScreen","topOfScreen","syncKeyboardFrame","keyboardFrame","updateLayoutFromSelection","_lastSelection$value","_input$value","customHeight","selection","end","y","clamp","scrollFromCurrentPosition","prevScrollPosition","prevLayout","onChangeText","onChangeTextHandler","useMemo","debounce","onSelectionChange","_lastSelection$value2","_lastSelection$value3","lastTarget","target","latestSelection","start","useFocusedInputHandler","useSmoothKeyboardHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","onMove","onEnd","useEffect","runOnUI","useAnimatedReaction","previous","view","useAnimatedStyle","paddingBottom","createElement","scrollEventThrottle","View","style","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo } from \"react\";\nimport Reanimated, {\n  clamp,\n  interpolate,\n  runOnUI,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollViewOffset,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n  useWindowDimensions,\n} from \"../../hooks\";\nimport { findNodeHandle } from \"../../utils/findNodeHandle\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce, scrollDistanceWithRespectToSnapPoints } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type {\n  FocusedInputLayoutChangedEvent,\n  FocusedInputSelectionChangedEvent,\n  NativeEvent,\n} from \"react-native-keyboard-controller\";\n\nexport type KeyboardAwareScrollViewProps = {\n  /** The distance between the keyboard and the caret inside a focused `TextInput` when the keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true`. */\n  enabled?: boolean;\n  /** Adjusting the bottom spacing of KeyboardAwareScrollView. Default is `0`. */\n  extraKeyboardSpace?: number;\n  /** Custom component for `ScrollView`. Default is `ScrollView`. */\n  ScrollViewComponent?: React.ComponentType<ScrollViewProps>;\n} & ScrollViewProps;\n\n// Everything begins from `onStart` handler. This handler is called every time,\n// when keyboard changes its size or when focused `TextInput` was changed. In\n// this handler we are calculating/memoizing values which later will be used\n// during layout movement. For that we calculate:\n// - layout of focused field (`layout`) - to understand whether there will be overlap\n// - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n// - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n// - current scroll position (`scrollPosition`) - used to scroll from this point\n//\n// Once we've calculated all necessary variables - we can actually start to use them.\n// It happens in `onMove` handler - this function simply calls `maybeScroll` with\n// current keyboard frame height. This functions makes the smooth transition.\n//\n// When the transition has finished we go to `onEnd` handler. In this handler\n// we verify, that the current field is not overlapped within a keyboard frame.\n// For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n// however there could be some cases, when `onMove` is not called:\n// - on iOS when TextInput was changed - keyboard transition is instant\n// - on Android when TextInput was changed and keyboard size wasn't changed\n// So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n//\n// ====================================================================================================================+\n// -----------------------------------------------------Flow chart-----------------------------------------------------+\n// ====================================================================================================================+\n//\n// +============================+       +============================+        +==================================+\n// +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n// +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n// +============================+       +============================+        +==================================+\n//\n// +============================+       +============================+        +=====================================+\n// + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n// +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n// +============================+       +============================+        +=====================================+\n//\n\n/**\n * A ScrollView component that automatically handles keyboard appearance and disappearance\n * by adjusting its content position to ensure the focused input remains visible.\n *\n * The component uses a sophisticated animation system to smoothly handle keyboard transitions\n * and maintain proper scroll position during keyboard interactions.\n *\n * @returns A ScrollView component that handles keyboard interactions.\n * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/components/keyboard-aware-scroll-view|Documentation} page for more details.\n * @example\n * ```tsx\n * <KeyboardAwareScrollView bottomOffset={20}>\n *   <TextInput placeholder=\"Enter text\" />\n *   <TextInput placeholder=\"Another input\" />\n * </KeyboardAwareScrollView>\n * ```\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      extraKeyboardSpace = 0,\n      ScrollViewComponent = Reanimated.ScrollView,\n      snapToOffsets,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useScrollViewOffset(scrollViewAnimatedRef);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n    const lastSelection =\n      useSharedValue<FocusedInputSelectionChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving.\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const relativeScrollTo =\n            keyboardHeight.value - (height - point) + bottomOffset;\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [\n              0,\n              scrollDistanceWithRespectToSnapPoints(\n                relativeScrollTo + scrollPosition.value,\n                snapToOffsets,\n              ) - scrollPosition.value,\n            ],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (point < 0) {\n          const positionOnScreen = visibleRect - bottomOffset;\n          const topOfScreen = scrollPosition.value + point;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled, height, snapToOffsets],\n    );\n    const syncKeyboardFrame = useCallback(\n      (e: NativeEvent) => {\n        \"worklet\";\n\n        const keyboardFrame = interpolate(\n          e.height,\n          [0, keyboardHeight.value],\n          [0, keyboardHeight.value + extraKeyboardSpace],\n        );\n\n        currentKeyboardFrameHeight.value = keyboardFrame;\n      },\n      [extraKeyboardSpace],\n    );\n\n    const updateLayoutFromSelection = useCallback(() => {\n      \"worklet\";\n\n      const customHeight = lastSelection.value?.selection.end.y;\n\n      if (!input.value?.layout || !customHeight) {\n        return false;\n      }\n\n      layout.value = {\n        ...input.value,\n        layout: {\n          ...input.value.layout,\n          // when we have multiline input with limited amount of lines, then custom height can be very big\n          // so we clamp it to max input height\n          height: clamp(customHeight, 0, input.value.layout.height),\n        },\n      };\n\n      return true;\n    }, [input, lastSelection, layout]);\n    const scrollFromCurrentPosition = useCallback(() => {\n      \"worklet\";\n\n      const prevScrollPosition = scrollPosition.value;\n      const prevLayout = layout.value;\n\n      if (!updateLayoutFromSelection()) {\n        return;\n      }\n\n      // eslint-disable-next-line react-compiler/react-compiler\n      scrollPosition.value = position.value;\n      maybeScroll(keyboardHeight.value, true);\n      scrollPosition.value = prevScrollPosition;\n      layout.value = prevLayout;\n    }, [maybeScroll]);\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n      scrollFromCurrentPosition();\n    }, [scrollFromCurrentPosition]);\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n    const onSelectionChange = useCallback(\n      (e: FocusedInputSelectionChangedEvent) => {\n        \"worklet\";\n\n        const lastTarget = lastSelection.value?.target;\n        const latestSelection = lastSelection.value?.selection;\n\n        lastSelection.value = e;\n\n        if (e.target !== lastTarget) {\n          // ignore this event, because \"focus changed\" event handled in `useSmoothKeyboardHandler`\n          return;\n        }\n        // caret in the end + end coordinates has been changed -> we moved to a new line\n        // so input may grow\n        if (\n          e.selection.end.position === e.selection.start.position &&\n          latestSelection?.end.y !== e.selection.end.y\n        ) {\n          return scrollFromCurrentPosition();\n        }\n        // selection has been changed\n        if (e.selection.start.position !== e.selection.end.position) {\n          return scrollFromCurrentPosition();\n        }\n\n        onChangeTextHandler();\n      },\n      [scrollFromCurrentPosition, onChangeTextHandler],\n    );\n\n    useFocusedInputHandler(\n      {\n        onSelectionChange: onSelectionChange,\n      },\n      [onSelectionChange],\n    );\n\n    useSmoothKeyboardHandler(\n      {\n        onStart: (e) => {\n          \"worklet\";\n\n          const keyboardWillChangeSize =\n            keyboardHeight.value !== e.height && e.height > 0;\n\n          keyboardWillAppear.value = e.height > 0 && keyboardHeight.value === 0;\n\n          const keyboardWillHide = e.height === 0;\n          const focusWasChanged =\n            (tag.value !== e.target && e.target !== -1) ||\n            keyboardWillChangeSize;\n\n          if (keyboardWillChangeSize) {\n            initialKeyboardSize.value = keyboardHeight.value;\n          }\n\n          if (keyboardWillHide) {\n            // on back transition need to interpolate as [0, keyboardHeight]\n            initialKeyboardSize.value = 0;\n            scrollPosition.value = scrollBeforeKeyboardMovement.value;\n          }\n\n          if (\n            keyboardWillAppear.value ||\n            keyboardWillChangeSize ||\n            focusWasChanged\n          ) {\n            // persist scroll value\n            scrollPosition.value = position.value;\n            // just persist height - later will be used in interpolation\n            keyboardHeight.value = e.height;\n          }\n\n          // focus was changed\n          if (focusWasChanged) {\n            tag.value = e.target;\n            // save position of focused text input when keyboard starts to move\n            updateLayoutFromSelection();\n            // save current scroll position - when keyboard will hide we'll reuse\n            // this value to achieve smooth hide effect\n            scrollBeforeKeyboardMovement.value = position.value;\n          }\n\n          if (focusWasChanged && !keyboardWillAppear.value) {\n            // update position on scroll value, so `onEnd` handler\n            // will pick up correct values\n            position.value += maybeScroll(e.height, true);\n          }\n        },\n        onMove: (e) => {\n          \"worklet\";\n\n          syncKeyboardFrame(e);\n\n          // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n          if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n            maybeScroll(e.height);\n          }\n        },\n        onEnd: (e) => {\n          \"worklet\";\n\n          keyboardHeight.value = e.height;\n          scrollPosition.value = position.value;\n\n          syncKeyboardFrame(e);\n        },\n      },\n      [maybeScroll, disableScrollOnKeyboardHide, syncKeyboardFrame],\n    );\n\n    useEffect(() => {\n      runOnUI(maybeScroll)(keyboardHeight.value, true);\n    }, [bottomOffset]);\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          // input has changed layout - let's check if we need to scroll\n          // may happen when you paste text, then onSelectionChange will be\n          // fired earlier than text actually changes its layout\n          scrollFromCurrentPosition();\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () =>\n        enabled\n          ? {\n              // animations become choppy when scrolling to the end of the `ScrollView` (when the last input is focused)\n              // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n              // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n              // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n              // re-calculation on every animation frame and it helps to achieve smooth animation.\n              // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n              paddingBottom: currentKeyboardFrameHeight.value + 1,\n            }\n          : {},\n      [enabled],\n    );\n\n    return (\n      <ScrollViewComponent\n        ref={onRef}\n        {...rest}\n        scrollEventThrottle={16}\n        onLayout={onScrollViewLayout}\n      >\n        {children}\n        {enabled && <Reanimated.View style={view} />}\n      </ScrollViewComponent>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}